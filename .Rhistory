q()
spp
source('1_SetConstants_m.txt') # modified by Mariona 25/05/18
## Craig Phillips, AgResearch, 4 July 2017
## Mariona Roige, AgResearch, 25/05/2018
# rm(list = ls())
library(dplyr)
library(plyr)
#This can be replaced by calling here()
#my_wd <- 'C:\\00_2018\\03_CABIvsGBIF\\PestProfiles'
#setwd(my_wd)
gbif_result_dir <- here('SpeciesSource','GbifData') # Changed this directory from Mariona to SpeciesSource
max_gbif_records <- 5000 # most spp have < 2000, but a few have 10s of 1000s
install.packages('dplyr')
q()
## Craig Phillips, AgResearch, 4 July 2017
## Mariona Roige, AgResearch, 25/05/2018
# rm(list = ls())
library(dplyr)
library(plyr)
library(here)
gbif_result_dir <- here('SpeciesSource','GbifData') # Changed this directory from Mariona to SpeciesSource
max_gbif_records <- 5000 # most spp have < 2000, but a few have 10s of 1000s
## Mariona: changed the wd and tested all commands run in R.
here()
help(here)
dr_here()
q()
## Craig Phillips, AgResearch, 4 July 2017
## Mariona Roige, AgResearch, 25/05/2018
library(dplyr)
library(plyr)
library(here)set_here('c:\00_2018\03_CABIvsGBIF\PestProfiles')
gbif_result_dir <- here('SpeciesSource','GbifData') # Changed this directory from Mariona to SpeciesSource
max_gbif_records <- 5000 # most spp have < 2000, but a few have 10s of 1000s
## Mariona: changed the wd and tested all commands run in R. library(dplyr)
library(plyr)
library(here)set_here('c:\00_2018\03_CABIvsGBIF\PestProfiles')
gbif_result_dir <- here('SpeciesSource','GbifData') # Changed this directory from Mariona to SpeciesSource
max_gbif_records <- 5000 # most spp have < 2000, but a few have 10s of 1000s
library(here)
set_here('c:\00_2018\03_CABIvsGBIF\PestProfiles')
set_here('c:\00_2018\03_CABIvsGBIF\PestProfiles')set_here('c:\\00_2018\\03_CABIvsGBIF\\PestProfiles')
help(here)
set_here('C:\\00_2018\\03_CABIvsGBIF\\PestProfiles')
Q()
q()
library(library(shiny)
ui <- fluidPage(
)
server <- function(input, output, session) {
}
shinyApp(ui, server))
library(shiny); source('C:/00_2018/02_Shiny/map_app.r')
library(shiny); source('C:/00_2018/02_Shiny/map_app.r')
source('C:/00_2018/02_Shiny/map_app.r')
source('C:/00_2018/02_Shiny/map_app.r')
source('C:/00_2018/02_Shiny/map_app.r')
source('C:/00_2018/02_Shiny/map_app.r')
source('C:\\Documents\\R\\win-library\\3.5')
source('M:\\Documents\\R\\win-library\\3.5')
source('C:/00_2018/02_Shiny/map_app.r')
library(shiny); source('C:/00_2018/02_Shiny/map_app.r')
source('C:/00_2018/02_Shiny/map_app.r')
source('C:/00_2018/02_Shiny/map_app.r')
source('C:/00_2018/02_Shiny/map_app.r')
source('C:/00_2018/02_Shiny/map_app.r')
library(shiny); runApp('//lfs/RoigeM$/Desktop/prova.r')
runApp('//lfs/RoigeM$/Desktop/prova.r')
runApp('//lfs/RoigeM$/Desktop/prova.r')
library(shiny); runApp('C:/00_2018/02_Shiny/Map_app_leaflet.r')
library(rgdal)
.libPaths()
install.packages('M:/Documents/R/win-library/3.5/rgdal_1.3-2.zip', lib='M:/Documents/R/win-library/3.5',repos = NULL)
library(shiny)
library(leaflet)
getwd()
library(plyr)
library(dplyr)
library(rgdal)
install.packages('M:/Documents/R/win-library/3.5/rgdal_1.3-2.zip', lib='M:/Documents/R/win-library/3.5',repos = NULL)
library(leaflet)
library(leaflet.extras)
library(mapview)
#library(rgeos)
#library(maptools) # loads sp too; for CRS, readShapePoly
#library(RColorBrewer)
runApp('C:/00_2018/02_Shiny/Map_app_leaflet.r')
runApp('C:/00_2018/02_Shiny/Map_app_leaflet.r')
install.packages('caTools')
_
/var/log/shiny-server.log
//var//log//shiny-server.log
#--------------------------------------------
library(shiny)
#rm(list=ls())
#setwd('C:/00_2018/02_Shiny')
library(plyr)
library(dplyr)
library(rgdal)
library(leaflet)
library(leaflet.extras)
library(mapview)
library(rgeos)
library(shiny)
# Requires PANDOC installation in windows machine
# https://github.com/jgm/pandoc/releases/tag/2.2.1
#library(maptools) # loads sp too; for CRS, readShapePoly
#library(RColorBrewer)
#--------------------------------------------
# Constants
#--------------------------------------------
r_func_dir <- './r_functions'
leaflet_out_dir <- 'climate_match_maps'
crs_geo <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")  # geographical, datum WGS84
#--------------------------------------------
# Retrieve some functions
#--------------------------------------------
source(paste(r_func_dir, 'fGetColorsToPlotAClimexMcrProjection.r', sep = '/'))
source(paste(r_func_dir, 'fDissolveSpatialPolys.r', sep = '/'))
##########################################################################################
##########################################################################################
## NZ DAIRY MAP ##########################################################################
#--------------------------------------------
# Load RData world CMI shapefile. The .5*.5dd polygons will be dissolved by CMI.
#--------------------------------------------
load('./world_proj_agbase_jan18_dai_dry_16May2018.RData') # wld_proj_agb
cmi <- wld_proj_agb
rm(wld_proj_agb)
#head(cmi@data)
#str(cmi@data)
#length(unique(cmi$cmiRnd))
#unique(cmi$cmiRnd)
cmi_diss <- fDissolveSpatialPolys(cmi, cmi$cmiRnd)
#plot(cmi_diss)
#cmi_diss@data
#str(cmi_diss@data)
# Reclaim cmiRnd as a variable
cmi_diss$cmiRnd <- as.numeric(as.character(cmi_diss$ID))
#--------------------------------------------
# Copy the dissolved polygon for each CMI to a separate shapefile so the CMI polygons can be plotted as separate layers with leaflet
#--------------------------------------------
# Create a name for each layer
cmi_sub_nm <- cmi_diss$cmiRnd * 10
cmi_sub_nm <- paste0('cmi_', cmi_sub_nm)
# Assign relevant CMI data to each name
for (i in 1: length(cmi_sub_nm)) {
assign(cmi_sub_nm[i], subset(cmi_diss, cmi_diss$cmiRnd == unique(cmi_diss$cmiRnd)[i]))
}
#--------------------------------------------
# Load RData NZ dairy area shapefile to dissolve all the .05*.05dd polygons into one polygon.
#--------------------------------------------
load('./Agbase_Jan2018_dai_dry_05dd_grid_wgs84.RData') # shp
nz_dai <- shp
rm(shp)
#head(nz_dai@data)
#length(nz_dai$dummy)
#unique(nz_dai$dummy)
if (!(exists('nz_dai_diss'))){
nz_dai_diss <- fDissolveSpatialPolys(nz_dai, nz_dai$dummy)
}
#plot(nz_dai_diss, col = 'green')
#--------------------------------------------
# Get colors for each CMI to be used in map
#--------------------------------------------
cols <- fGetColorsToPlotAClimexMcrProjection(unique(cmi$cmiRnd))
##########################################################################################
##########################################################################################
## NATIONAL PARKS MAP   ##################################################################
#--------------------------------------------
# Load RData world CMI shapefile. The .5*.5dd polygons will be dissolved by CMI.
#--------------------------------------------
#dir(gis_dat_dir)
#load(paste(gis_dat_dir, 'world_proj_agbase_jan18_dai_dry_16May2018.RData', sep = '/')) # wld_proj_agb
#cmi <- wld_proj_agb
#rm(wld_proj_agb)
load('./world_cmis_for_nz_national_parks_sf.RData') # Cmi
cmiNP <- Cmi
rm(Cmi)
#head(cmi@data)
#str(cmi@data)
#length(unique(cmi$cmiRnd))
#unique(cmi$cmiRnd)
cmi_dissNP <- fDissolveSpatialPolys(cmiNP, cmiNP$cmiRnd)
#plot(cmi_diss)
#cmi_diss@data
#str(cmi_diss@data)
# Reclaim cmiRnd as a variable
cmi_dissNP$cmiRnd <- as.numeric(as.character(cmi_dissNP$ID))
#--------------------------------------------
# Copy the dissolved polygon for each CMI to a separate shapefile so the CMI polygons can be plotted as separate layers with leaflet
#--------------------------------------------
# Create a name for each layer
cmi_sub_nmNP <- cmi_dissNP$cmiRnd * 10
cmi_sub_nmNP <- paste0('cmiNP_', cmi_sub_nmNP)
# Assign relevant CMI data to each name
for (i in 1: length(cmi_sub_nmNP)) {
assign(cmi_sub_nmNP[i], subset(cmi_dissNP, cmi_dissNP$cmiRnd == unique(cmi_dissNP$cmiRnd)[i]))
}
#--------------------------------------------
# Load RData NZ area shapefile to dissolve all the polygons into one.
#--------------------------------------------
#dir(gis_dat_dir)
#load(paste(gis_dat_dir, 'Agbase_Jan2018_dai_dry_05dd_grid_wgs84.RData', sep = '/')) # shp
#nz_sf <- shp
#rm(shp)
#head(nz_sf@data)
#length(nz_sf$dummy)
#unique(nz_sf$dummy)
#nz_sf_diss <- fDissolveSpatialPolys(nz_sf, nz_sf$dummy)
load( 'nz_national_parks_sf.RData') # parks
nz_sf <- parks
rm(parks)
head(nz_sf@data)
unique(nz_sf$type)
if (!exists('nz_sf_diss')){
nz_sf_diss <- fDissolveSpatialPolys(nz_sf, nz_sf$type) # super long to run!!! Might wanna keep the function call out of the shiny call. I've put it
}													   # in an if{} clause so that for the time being debugging is faster.
# plot(nz_sf_diss, col = 'green') Not necessary
#--------------------------------------------
# Get colors for each CMI to be used in map
#--------------------------------------------
colsNP <- fGetColorsToPlotAClimexMcrProjection(unique(cmiNP$cmiRnd))
sort(unique(cmiNP$cmiRnd))
ls(pattern = 'cmiNP_')
names(cmiNP)
#----------------------------------------------
# Shiny stuff
#----------------------------------------------
ui <- fluidPage(
titlePanel("CMI maps for MPI"),
selectInput('maptoshow',
label = h3('Map to display'),
choices = c('Dairy NZ map' = 'dnz' , 'National Parks Map' = 'NPnz'),
selected = 'dnz')	,
verbatimTextOutput("debug"),
helpText('Choose the map you want to display. Thanks for being patient while map loads'),
mymap <- leafletOutput('mymap', height = 900),
p()
)
server <- function(input, output, session) {
output$debug <- renderPrint({					# Debugging code
sessionInfo()
input$maptoshow
})
whichmap <- reactive({
if (input$maptoshow == 'dnz') {
# Create Dairy CMI map
MAP <- leaflet() %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addSearchOSM() %>% # enable user to search for names within tiles
addControl("Climate match with NZ dairy areas", position = "topright") %>%
setView(median(cmi$Loc1Lon), median(cmi$Loc1Lat), zoom = 3) %>% # initialise view extent
addPolygons(data = cmi_1, color = cols[1], weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5, label = htmltools::HTML("0.1"), group = '0.1') %>%
addPolygons(data = cmi_2, color = cols[2], weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5, label = htmltools::HTML("0.2"), group = '0.2') %>%
addPolygons(data = cmi_3, color = cols[3], weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5, label = htmltools::HTML("0.3"), group = '0.3') %>%
addPolygons(data = cmi_4, color = cols[4], weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5, label = htmltools::HTML("0.4"), group = '0.4') %>%
addPolygons(data = cmi_5, color = cols[5], weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5, label = htmltools::HTML("0.5"), group = '0.5') %>%
addPolygons(data = cmi_6, color = cols[6], weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5, label = htmltools::HTML("0.6"), group = '0.6') %>%
addPolygons(data = cmi_7, color = cols[7], weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5, label = htmltools::HTML("0.7"), group = '0.7') %>%
addPolygons(data = cmi_8, color = cols[8], weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5, label = htmltools::HTML("0.8"), group = '0.8') %>%
addPolygons(data = nz_dai_diss, color = 'green', weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5, label = htmltools::HTML("NZ dairy"), group = 'NZ dairy') %>%
addLayersControl(
overlayGroups = c('0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', 'NZ dairy'),
options = layersControlOptions(collapsed = FALSE)
)
}
if (input$maptoshow == 'NPnz'){
# Create a NZ National Parks CMI map
MAP <-	leaflet() %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addSearchOSM() %>% # enable user to search for names within tiles
addControl("Climate match with NZ national parks, Craig Phillips, AGR/B3, June 2018", position = "topright") %>%
setView(median(cmi$Loc1Lon, na.rm = T), median(cmi$Loc1Lat, na.rm = T), zoom = 3) %>% # initialise view extent
addPolygons(data = cmiNP_1, color = cols[1], weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5, label = htmltools::HTML("0.1"), group = '0.1') %>%
addPolygons(data = cmiNP_2, color = cols[2], weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5, label = htmltools::HTML("0.2"), group = '0.2') %>%
addPolygons(data = cmiNP_3, color = cols[3], weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5, label = htmltools::HTML("0.3"), group = '0.3') %>%
addPolygons(data = cmiNP_4, color = cols[4], weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5, label = htmltools::HTML("0.4"), group = '0.4') %>%
addPolygons(data = cmiNP_5, color = cols[5], weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5, label = htmltools::HTML("0.5"), group = '0.5') %>%
addPolygons(data = cmiNP_6, color = cols[6], weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5, label = htmltools::HTML("0.6"), group = '0.6') %>%
addPolygons(data = cmiNP_7, color = cols[7], weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5, label = htmltools::HTML("0.7"), group = '0.7') %>%
addPolygons(data = cmiNP_8, color = cols[8], weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5, label = htmltools::HTML("0.8"), group = '0.8') %>%
addPolygons(data = cmiNP_10, color = cols[9], weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5, label = htmltools::HTML("1"), group = '1') %>%
addPolygons(data = nz_sf_diss, color = 'green', weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5, label = htmltools::HTML("Aotearoa's National Parks"), group = 'NZ national parks') %>%
addLayersControl(
#    baseGroups = c("OSM (default)", "Toner", "Toner Lite"),
overlayGroups = c('0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '1', 'NZ national parks'),
options = layersControlOptions(collapsed = FALSE)
)
}
return(MAP)
})
output$mymap <- renderLeaflet({whichmap()})
}
shinyApp(ui, server)
rm(list=ls())
library(shiny); runApp('C:/00_2018/002_Shiny/02_Shiny_app_craig_dependencies.R')
# Mariona Roige Valiente. 2018.
# This script builds the shiny app to visualize the leaflet maps
# in a website environment.
# This is script to test Craig's new maps stored in the file NatParkMap.rdata
# rm(list=ls())
# setwd('C:/00_2018/002_Shiny')
library(plyr)
library(dplyr)
library(rgdal)
library(leaflet)
library(leaflet.extras)
library(mapview)
library(rgeos)
library(shiny)
load('NatParkMap.rdata') # Loads the leaflet object 'NatParkMap'
# I cant print it in my console as it is.
# How are the dependencies specified now?
# "C:\\CP progs\\R-3.5.1\\library\\leaflet\\htmlwidgets\\lib\\leaflet-providers"
# "C:\\CP progs\\R-3.5.1\\library\\leaflet\\htmlwidgets\\plugins\\leaflet-providers-plugin"
# "C:\\CP progs\\R-3.5.1\\library\\leaflet.extras\\htmlwidgets\\build\\fuse_js"
# "C:\\CP progs\\R-3.5.1\\library\\leaflet.extras\\htmlwidgets\\build\\lfx-search"
# Even if I can't print it though, would it work straight in Shiny without having to midify any dependency
# # PROBLEM 1 : IT DOESN'T WORK IN MY COMPUTER (THE MAP DOES NOT LOAD THE SEA)
# # Solution to PROBLEM 1: Change the paths to my libraries?
# NatParkMap$dependencies[[1]]$src$file <- paste0(.libPaths()[1], "/leaflet/htmlwidgets/lib/leaflet-providers")
# NatParkMap$dependencies[[2]]$src$file <- paste0(.libPaths()[1], "/leaflet/htmlwidgets/plugins/leaflet-providers-plugin")
# NatParkMap$dependencies[[3]]$src$file <- paste0(.libPaths()[1], "/leaflet.extras/htmlwidgets/build/fuse_js")
# NatParkMap$dependencies[[4]]$src$file <- paste0(.libPaths()[1], "/leaflet.extras/htmlwidgets/build/lfx-search")
# # NatParkMap # now it works!
# # Change the paths to the extra libraries that leaflet map objects have hardcoded
# NatParkMap$dependencies[[1]]$src$file <- normalizePath(paste0(.libPaths()[1], "/leaflet/htmlwidgets/lib/leaflet-providers"))
# NatParkMap$dependencies[[2]]$src$file <- normalizePath(paste0(.libPaths()[1], "/leaflet/htmlwidgets/plugins/leaflet-providers-plugin"))
# NatParkMap$dependencies[[3]]$src$file <- normalizePath(paste0(.libPaths()[1], "/leaflet.extras/htmlwidgets/build/fuse_js"))
# NatParkMap$dependencies[[4]]$src$file <- normalizePath(paste0(.libPaths()[1], "/leaflet.extras/htmlwidgets/build/lfx-search"))
# NatParkMap # Ok, it still works with the normalized paths.
# PROBLEM 2: IT DOESN'T WORK ON SHINY
# Potential solution 1: Craig's paths should be with slash rather than double backslash
#
# NatParkMap$dependencies[[1]]$src$file <- paste0("C:/CP progs/R-3.5.1/library", "/leaflet/htmlwidgets/lib/leaflet-providers")
# NatParkMap$dependencies[[2]]$src$file <- paste0("C:/CP progs/R-3.5.1/library", "/leaflet/htmlwidgets/plugins/leaflet-providers-plugin")
# NatParkMap$dependencies[[3]]$src$file <- paste0("C:/CP progs/R-3.5.1/library", "/leaflet.extras/htmlwidgets/build/fuse_js")
# NatParkMap$dependencies[[4]]$src$file <- paste0("C:/CP progs/R-3.5.1/library", "/leaflet.extras/htmlwidgets/build/lfx-search")
#
#
# NatParkMap$dependencies[[1]]$src$file <- normalizePath(paste0(.libPaths()[1], "/leaflet/htmlwidgets/lib/leaflet-providers"))
# NatParkMap$dependencies[[2]]$src$file <- normalizePath(paste0(.libPaths()[1], "/leaflet/htmlwidgets/plugins/leaflet-providers-plugin"))
# NatParkMap$dependencies[[3]]$src$file <- normalizePath(paste0(.libPaths()[1], "/leaflet.extras/htmlwidgets/build/fuse_js"))
# NatParkMap$dependencies[[4]]$src$file <- normalizePath(paste0(.libPaths()[1], "/leaflet.extras/htmlwidgets/build/lfx-search"))
#----------------------------------------------
# Shiny stuff
#----------------------------------------------
ui <- fluidPage(
titlePanel("CMI maps for MPI"),
selectInput('maptoshow',
label = h3('Map to display'),
choices = c('Dairy NZ map' = 'dnz' , 'National Parks Map' = 'NPnz'),
selected = 'dnz')	,
helpText('Choose the map you want to display. Thanks for being patient while map loads'),
mymap <- leafletOutput('mymap', height = 900),
p()
)
server <- function(input, output, session) {
output$debug <- renderPrint({					# Debugging code
sessionInfo()
input$maptoshow
})
whichmap <- reactive({
if (input$maptoshow == 'dnz') {
# Load a DairyNZ CMI map
MAP <- NatParkMap
}
if (input$maptoshow == 'NPnz'){
# Load a NZ National Parks CMI map
MAP <-	NatParkMap
}
return(MAP)
})
output$mymap <- renderLeaflet({whichmap()})
}
shinyApp(ui, server)
# Mariona Roige Valiente. 2018.
# This script builds the shiny app to visualize the leaflet maps
# in a website environment.
# This is script to test Craig's new maps stored in the file NatParkMap.rdata
# rm(list=ls())
# setwd('C:/00_2018/002_Shiny')
library(plyr)
library(dplyr)
library(rgdal)
library(leaflet)
library(leaflet.extras)
library(mapview)
library(rgeos)
library(shiny)
load('NatParkMap.rdata') # Loads the leaflet object 'NatParkMap'
# I cant print it in my console as it is.
# How are the dependencies specified now?
# "C:\\CP progs\\R-3.5.1\\library\\leaflet\\htmlwidgets\\lib\\leaflet-providers"
# "C:\\CP progs\\R-3.5.1\\library\\leaflet\\htmlwidgets\\plugins\\leaflet-providers-plugin"
# "C:\\CP progs\\R-3.5.1\\library\\leaflet.extras\\htmlwidgets\\build\\fuse_js"
# "C:\\CP progs\\R-3.5.1\\library\\leaflet.extras\\htmlwidgets\\build\\lfx-search"
# Even if I can't print it though, would it work straight in Shiny without having to midify any dependency
# # PROBLEM 1 : IT DOESN'T WORK IN MY COMPUTER (THE MAP DOES NOT LOAD THE SEA)
# # Solution to PROBLEM 1: Change the paths to my libraries?
# NatParkMap$dependencies[[1]]$src$file <- paste0(.libPaths()[1], "/leaflet/htmlwidgets/lib/leaflet-providers")
# NatParkMap$dependencies[[2]]$src$file <- paste0(.libPaths()[1], "/leaflet/htmlwidgets/plugins/leaflet-providers-plugin")
# NatParkMap$dependencies[[3]]$src$file <- paste0(.libPaths()[1], "/leaflet.extras/htmlwidgets/build/fuse_js")
# NatParkMap$dependencies[[4]]$src$file <- paste0(.libPaths()[1], "/leaflet.extras/htmlwidgets/build/lfx-search")
# # NatParkMap # now it works!
# # Change the paths to the extra libraries that leaflet map objects have hardcoded
# NatParkMap$dependencies[[1]]$src$file <- normalizePath(paste0(.libPaths()[1], "/leaflet/htmlwidgets/lib/leaflet-providers"))
# NatParkMap$dependencies[[2]]$src$file <- normalizePath(paste0(.libPaths()[1], "/leaflet/htmlwidgets/plugins/leaflet-providers-plugin"))
# NatParkMap$dependencies[[3]]$src$file <- normalizePath(paste0(.libPaths()[1], "/leaflet.extras/htmlwidgets/build/fuse_js"))
# NatParkMap$dependencies[[4]]$src$file <- normalizePath(paste0(.libPaths()[1], "/leaflet.extras/htmlwidgets/build/lfx-search"))
# NatParkMap # Ok, it still works with the normalized paths.
# PROBLEM 2: IT DOESN'T WORK ON SHINY
# Potential solution 1: Craig's paths should be with slash rather than double backslash
#
# NatParkMap$dependencies[[1]]$src$file <- paste0("C:/CP progs/R-3.5.1/library", "/leaflet/htmlwidgets/lib/leaflet-providers")
# NatParkMap$dependencies[[2]]$src$file <- paste0("C:/CP progs/R-3.5.1/library", "/leaflet/htmlwidgets/plugins/leaflet-providers-plugin")
# NatParkMap$dependencies[[3]]$src$file <- paste0("C:/CP progs/R-3.5.1/library", "/leaflet.extras/htmlwidgets/build/fuse_js")
# NatParkMap$dependencies[[4]]$src$file <- paste0("C:/CP progs/R-3.5.1/library", "/leaflet.extras/htmlwidgets/build/lfx-search")
#
#
# NatParkMap$dependencies[[1]]$src$file <- normalizePath(paste0(.libPaths()[1], "/leaflet/htmlwidgets/lib/leaflet-providers"))
# NatParkMap$dependencies[[2]]$src$file <- normalizePath(paste0(.libPaths()[1], "/leaflet/htmlwidgets/plugins/leaflet-providers-plugin"))
# NatParkMap$dependencies[[3]]$src$file <- normalizePath(paste0(.libPaths()[1], "/leaflet.extras/htmlwidgets/build/fuse_js"))
# NatParkMap$dependencies[[4]]$src$file <- normalizePath(paste0(.libPaths()[1], "/leaflet.extras/htmlwidgets/build/lfx-search"))
#----------------------------------------------
# Shiny stuff
#----------------------------------------------
ui <- fluidPage(
titlePanel("CMI maps for MPI"),
selectInput('maptoshow',
label = h3('Map to display'),
choices = c('Dairy NZ map' = 'dnz' , 'National Parks Map' = 'NPnz'),
selected = 'dnz')	,
helpText('Choose the map you want to display. Thanks for being patient while map loads'),
mymap <- leafletOutput('mymap', height = 900),
p()
)
server <- function(input, output, session) {
output$debug <- renderPrint({					# Debugging code
sessionInfo()
input$maptoshow
})
whichmap <- reactive({
if (input$maptoshow == 'dnz') {
# Load a DairyNZ CMI map
MAP <- NatParkMap
}
if (input$maptoshow == 'NPnz'){
# Load a NZ National Parks CMI map
MAP <-	NatParkMap
}
return(MAP)
})
output$mymap <- renderLeaflet({whichmap()})
}
shinyApp(ui, server)
library(knitr)
library(plyr)
library(dplyr)
library(rgdal)
library(leaflet)
library(leaflet.extras)
library(mapview)
library(rgeos)
library(shiny)
library(shiny); runApp('C:/00_2018/002_Shiny/03_Shiny_app_test_which_links_dependencies.R')
rm(list=ls())
library(plyr)
library(dplyr)
library(rgdal)
library(leaflet)
library(leaflet.extras)
library(mapview)
library(rgeos)
library(shiny)
load('five_leaflet_maps_1_Oct_2018.RData')
setwd('E:/00_2018/wfh')
load('five_leaflet_maps_1_Oct_2018.RData')
View(port_of_tauranga_ll_map)
runApp()
